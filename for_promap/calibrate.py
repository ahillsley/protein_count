import numpy as npimport skimage.io, scipyimport pandas as pdfrom fluorescence_model import ModelParamsfrom trace_model import TraceModelfrom intensity_trace import IntensityTraceimport matplotlib.pyplot as pltimport seaborn as snsfrom pomegranate import GeneralMixtureModel, LogNormalDistributiondef read_image(file_path):    img = skimage.io.imread(file_path)    np_img = np.array(img)    np_img = np.moveaxis(np_img, 0,2)        return np_imgdef clean_spots(spots, img):    spots = np.vstack((np.asarray(spots['y'], ),                        np.asarray(spots['x']))).astype('int')        bad_spots = np.concatenate((np.where(spots <= 5)[1], np.where(spots >= img.shape[0]-5)[1]))    clean_spots = np.concatenate((np.expand_dims(np.delete(spots[0,:], bad_spots),1),                                   np.expand_dims(np.delete(spots[1,:], bad_spots),1)),                                 axis = 1)    return clean_spotsdef pixel_t_trace(img, y ,x, pxl_size):    if pxl_size == 0:        crop = img[y,x,:]    else:        crop = img[(y-pxl_size):(y+pxl_size), (x-pxl_size):(x+pxl_size),:]        crop = np.max(crop, axis=0)        crop = np.max(crop, axis=0)        return cropdef extract_traces(img, spots):    c_spots = clean_spots(spots, img)    traces = np.zeros((len(c_spots), img.shape[2]))    for i in range(len(traces)):        traces[i,:] = pixel_t_trace(img, c_spots[i,0], c_spots[i,1], 3 )        return traces    def normalize_trace(trace):    X = np.expand_dims(np.ravel(trace), 1)    model = GeneralMixtureModel([LogNormalDistribution(np.log(np.min(trace)), 0.1),                                 LogNormalDistribution(np.log(np.max(trace)), 0.1)])    model.fit(X,              inertia = 0.90,              lr_decay = 0.5)        background_mu = np.exp(model.distributions[0].parameters[0])    signal_mu = np.exp(model.distributions[1].parameters[0])        scale = 1.0/(signal_mu - background_mu)        # scale, such that distance between peaks is 1    scaled_trace = trace * scale    # shift, such that mean background is 0    scaled_trace -= background_mu * scale    # shift, such that mean background is 1    scaled_trace += 1        return scaled_trace, scaleif __name__ == "__main__":        image_file_path = '../../Images/0525_5nM_1.tif'    spots_file_path = '../../Images/0525_5_nM_1_spots.csv'    img = read_image(image_file_path)    spots = pd.read_csv(spots_file_path)    traces = extract_traces(img, spots)    scaled_traces = np.ones_like(traces)    scales = np.ones((traces.shape[0]))        for i, trace in enumerate(traces):        print(i)        scaled_traces[i,:], scales[i] = normalize_trace(trace)            